{"ast":null,"code":"/**\r\n * Authentication Context\r\n * Manages user authentication state throughout the application\r\n */import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const[loginModalCallback,setLoginModalCallback]=useState(null);useEffect(()=>{// Check if user is logged in on app start\nconst savedUser=localStorage.getItem('user');if(savedUser){try{setUser(JSON.parse(savedUser));}catch(error){console.error('Error parsing saved user data:',error);localStorage.removeItem('user');}}setIsLoading(false);},[]);const login=userData=>{setUser(userData);localStorage.setItem('user',JSON.stringify(userData));};const logout=()=>{setUser(null);localStorage.removeItem('user');};const openLoginModal=()=>{if(loginModalCallback){loginModalCallback();}};const registerLoginModalHandler=useCallback(callback=>{setLoginModalCallback(()=>callback);},[]);const isAuthenticated=!!user;const isAdmin=(user===null||user===void 0?void 0:user.user_type)==='admin';const value={user,isAuthenticated,isAdmin,isLoading,login,logout,openLoginModal,registerLoginModalHandler};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","loginModalCallback","setLoginModalCallback","savedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","userData","setItem","stringify","logout","openLoginModal","registerLoginModalHandler","callback","isAuthenticated","isAdmin","user_type","value","Provider"],"sources":["C:/Users/user/Documents/GitHub/BrightBuy-Frontend/frontend/src/context/AuthContext.jsx"],"sourcesContent":["/**\r\n * Authentication Context\r\n * Manages user authentication state throughout the application\r\n */\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [loginModalCallback, setLoginModalCallback] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      try {\r\n        setUser(JSON.parse(savedUser));\r\n      } catch (error) {\r\n        console.error('Error parsing saved user data:', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const openLoginModal = () => {\r\n    if (loginModalCallback) {\r\n      loginModalCallback();\r\n    }\r\n  };\r\n\r\n  const registerLoginModalHandler = useCallback((callback) => {\r\n    setLoginModalCallback(() => callback);\r\n  }, []);\r\n\r\n  const isAuthenticated = !!user;\r\n  const isAdmin = user?.user_type === 'admin';\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n  isAdmin,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    openLoginModal,\r\n    registerLoginModalHandler\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"AAAA;AACA;AACA;AACA,GACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3F,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGR,UAAU,CAACM,WAAW,CAAC,CACvC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACc,SAAS,CAAEC,YAAY,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACgB,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAElEC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAiB,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC9C,GAAIF,SAAS,CAAE,CACb,GAAI,CACFL,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC,CAChC,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CACAV,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAW,KAAK,CAAIC,QAAQ,EAAK,CAC1Bd,OAAO,CAACc,QAAQ,CAAC,CACjBR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC,CACxD,CAAC,CAED,KAAM,CAAAG,MAAM,CAAGA,CAAA,GAAM,CACnBjB,OAAO,CAAC,IAAI,CAAC,CACbM,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAED,KAAM,CAAAM,cAAc,CAAGA,CAAA,GAAM,CAC3B,GAAIf,kBAAkB,CAAE,CACtBA,kBAAkB,CAAC,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAAgB,yBAAyB,CAAG9B,WAAW,CAAE+B,QAAQ,EAAK,CAC1DhB,qBAAqB,CAAC,IAAMgB,QAAQ,CAAC,CACvC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,eAAe,CAAG,CAAC,CAACtB,IAAI,CAC9B,KAAM,CAAAuB,OAAO,CAAG,CAAAvB,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEwB,SAAS,IAAK,OAAO,CAE3C,KAAM,CAAAC,KAAK,CAAG,CACZzB,IAAI,CACJsB,eAAe,CACjBC,OAAO,CACLrB,SAAS,CACTY,KAAK,CACLI,MAAM,CACNC,cAAc,CACdC,yBACF,CAAC,CAED,mBACE5B,IAAA,CAACC,WAAW,CAACiC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA1B,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,cAAe,CAAAN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}